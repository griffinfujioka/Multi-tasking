/************ t.c file **********************************/
#define NPROC     9        
#define SSIZE  1024                /* kstack int size */

#define DEAD   	0                /* proc status     */
#define READY   1     
#define FREE 	2 

typedef struct proc
{
	struct proc *next;  
	int  ksp;               /* saved sp; offset = 2 */
	int  pid;
	int  ppid; 
	int  status;            /* READY|DEAD, etc */
	int  kstack[SSIZE];     // kmode stack of task
	int priority; 		// priority 
}PROC;


#include "io.c"  /* <===== use YOUR OWN io.c with printf() ****/


// readyQueue and freeList aren't necessary, but helpful 
PROC proc[NPROC];	// array of PROC structures
PROC *running, *readyQueue; 		// currently running PROC
PROC *freeList; 		// Point to first available free PROC in proc array 

int  procSize = sizeof(PROC);

/****************************************************************
 Initialize the proc's as shown:
        running ---> proc[0] -> proc[1];

        proc[1] to proc[N-1] form a circular list:

        proc[1] --> proc[2] ... --> proc[NPROC-1] -->
          ^                                         |
          |<---------------------------------------<-

        Each proc's kstack contains:
        retPC, ax, bx, cx, dx, bp, si, di, flag;  all 2 bytes
*****************************************************************/

int body();  
int kfork(); 

// Enter p into queue by priority 
void enqueue(p,queue) PROC *p; PROC **queue;
{
	PROC* tp; 

	int i = (*queue)->pid; 
	printf("\n-- ENQUEUE P%d to P%d\n", p->pid, i); 
	tp = (*queue); 
	if((*queue) == NULL) 	// empty queue 
	{
		printf("queue is empty, adding P%d\n", p->pid); 
		(*queue) = p; 
	}
	else
	{ 
		//p = &proc[i];  
		while((*queue)->next)	
		{
			(*queue) = (*queue)->next; 	// Iterate through the queue 
		}
		//printf("Adding P%d to readyQueue after %d\n", p->pid, tp->pid); 
		(*queue)->next = p;
	}

	p->next = NULL; 
	printf("\n"); 
}
// Pop the first proc from queue
PROC* dequeue(queue) PROC **queue; 
{
	PROC *p; 
	p = (*queue); 
	if(p)
	{
		printf("Queue is not null. Popping first item."); 
		(*queue) = (*queue)->next; 
	}

	printf("Dequeue returning %d\n", p->pid); 
	return p; 
}

void printQueue(queue) PROC *queue; 
{
	PROC *p; 

	printf("running = %d\n", running->pid);

  	p = running;
	while(p != NULL)
	{
    		printf("%d -> ", p->pid);
    		p = p->next;
	}
  	printf("\n");
}

void printFreeList()
{
	PROC *p; 
	printf("\nfreeList : "); 
	p = freeList; 
	while(p != NULL)
	{
		printf("%d -> ", p->pid); 
		p = p->next; 
	}
	printf("NULL\n"); 
}

void printReadyQueue()
{
	PROC *p; 
	printf("\nreadyQueue : "); 
	p = &readyQueue[0];
	while(p != NULL && p->status == READY)
	{
		printf("%d -> ", p->pid); 
		p = p->next; 
	}
}

// Return a free proc from the freeList or 0 if none are available
PROC* getproc()
{
	PROC *p; 
	int i;
	 
	p = freeList; 

	if(p)	// iterate through freeList
	{
		freeList = freeList->next; 
		/*if(p->status == FREE)
		{
			printf("getproc() found free proc - returning proc with pid = %d\n", p->pid); 
			return p; 	
		}
		p = p->next; */ 
		return p; 
		

	}

	printf("No free procs found, returning 0...\n"); 
	return 0; 
}

// get a free proc from freeList and enter it into the readyQueue.
int kfork()
{
	 	
	PROC *p; 
	int j; 
	printf("\nForking child off proc %d\n", running->pid);
	p = getproc(); 	// get free PROC from freeList

	if(p == 0) // No free PROCs found
		return -1; 

	// Initialize the new proc
	p->status = READY;
	p->ppid = running->pid; 
	//p->next = &proc[(p->pid)+1]; 

	
	// Initialize p's kstack[] as if it called tswitch() before. Is this correct?
	for (j=1; j<10; j++)			// To use pusha, change 10 to 11 here. 
	{
		p->kstack[SSIZE - j] = 0;          // clear all saved registers to equal 0
		
	}

	p->kstack[SSIZE-1]=(int)body;          // push resume address 
	p->ksp = &(p->kstack[SSIZE-9]);        // save address of top of stack within PROC
	
	enqueue(p, (&readyQueue)); 	// insert p into readyQueue by priority 
	//readyQueue = p;
	
	printf("kfork forked P%d off of parent P%d\n", p->pid, p->ppid); 
	return (p->pid); 
}


int initialize()
{
  	int i, j;
  	PROC *p;

	printf("Initializing..."); 

	// Initialize proc array with all PROCs free
	for(i=0; i<NPROC; i++)
	{
		proc[i].pid = i; 
		proc[i].status = FREE; 
		proc[i].next = &proc[i+1]; 
		
	}
	&proc[NPROC-1]->next = NULL;  
	freeList = &proc[0]; 		// Initially, all PROCs are free
	readyQueue = &proc[0]; 

	
	p = getproc();  	// Create P0 
	p->status = READY; 
	p->priority = 0; 	// P0 has a priority of 0 
	p->pid = 0; 
	p->next = &proc[1]; 
	running = p; 
	
	p->ppid = running->pid;  // P0 is it's own parent 	


  	for(i=1; i<NPROC; i++)
	{
		proc[i].priority = 1; 	// All other PROCs have a priority of 1
	}
  	printf("complete.\n"); 
}

char *gasp[NPROC]={
     "Oh! You are killing me .......",
     "Oh! I am dying ...............", 
     "Oh! I am a goner .............", 
     "Bye! Bye! World...............",      
};

int grave(){
  printf("\n*****************************************\n"); 
  printf("Task %d %s\n", running->pid,gasp[(running->pid) % 4]);
  printf("*****************************************\n");
  running->status = DEAD;

  tswitch();   /* journey of no return */        
}

int ps()
{
  	PROC *p;

	int i; 
  	//printf("running = %d\n", running->pid);

  	p = readyQueue;
	printf("Running P%d in ps()\n", running->pid); 
  	printf("readyProcs = ");
	// #hack
  	for(i=0; i<NPROC; i++)
	{
		p = &proc[i]; 
		if(p->status == READY)
		{
			 
			printf("%d -> ", p->pid);
		}
    		
    		//p = p->next;		// I think this is telling me P0 isn't connected to P1... 
 	}
	 
	p = freeList; 
	printf("\nfree list = "); 
	while(p && p->status == FREE)
	{
		printf("%d -> ", p->pid); 
		p = p->next; 
	}
	//printReadyQueue(); 
	//printFreeList(); 
  	printf("\n");
}

int body()
{  
	char c;
   	while(1)
	{
      		ps();	// print all procs 
      		printf("I am Proc %d in body()\n", running->pid);
      		printf("Input a char : [s|q|f] ");
       		c=getc();
       		switch(c)
		{
            		case 's': tswitch(); break;
            		case 'q': grave();   break;
			case 'f': kfork(); break; 
            		default : break;  
       		}
   	}
}


main()
{
	
 	printf("\nWelcome to the 460 Multitasking System\n");
   	initialize();
   	//printf("P0 forks P1\n");
	kfork(); 	// fork P1 
	printf("P0 switches to P1... calling tswitch()\n"); 
   	tswitch();	// switches running to P1
	// Switch, Quit & Fork processes until all of them are dead except P0

 	printf("P0 resumes: all dead, happy ending\n");
}


int scheduler()
{
	PROC *p;
 	int i; 
    	/*p = running->next;

   	while (p->status != READY && p != running)
      		p = p->next;

    	if (p == running)
       		running = &proc[0];
   	 else
       		running = p; 
	 
	 

    	printf("\n-----------------------------\n");
    	printf("next running proc = %d\n", running->pid);
	printf("-----------------------------\n"); */ 

	// Get to here, then I print out garbage. Caused by enqueue. 
 	
	if(running->status == READY)
	{
		enqueue(running, (&readyQueue));
	} 

	running = dequeue(&readyQueue);  

	printf("Running P%d in scheduler()\n", running->pid); 
	 
}








